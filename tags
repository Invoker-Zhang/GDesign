!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOC_FILE_CLUS	ourhdr.h	177;"	d
ALLOC_FILE_SIZE	ourhdr.h	60;"	d
Attri	ourhdr.h	/^	uchar	Attri;				\/\/Attribution: 0:rdwr ; 1:rdonly ; 10:hide ; 100:system ; 1000:volumn ; 10000:subdir ; 100000:archive ; 0x0f:long fdt.$/;"	m	struct:__anon6
BIOS_PARAMETER_BLOCK	ourhdr.h	/^typedef struct BIOS_PARAMETER_BLOCK{$/;"	s
BPB	ourhdr.h	/^}BPB;$/;"	t	typeref:struct:BIOS_PARAMETER_BLOCK
BPB_BkBootSec	ourhdr.h	/^	uint16		BPB_BkBootSec;		\/\/backup of bootsector$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_BytePerSec	ourhdr.h	/^	uint16		BPB_BytePerSec;		\/\/Bytes per sector$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_FATSz16	ourhdr.h	/^	uint16		BPB_FATSz16;		\/\/sectors per fat$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_FATSz32	ourhdr.h	/^	uint32		BPB_FATSz32;		\/\/$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_FSIfo	ourhdr.h	/^	uint16		BPB_FSIfo;			\/\/FSINFO sector number;$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_FSVer	ourhdr.h	/^	uint16		BPB_FSVer;			\/\/version number$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_Flags	ourhdr.h	/^	uint16		BPB_Flags;			\/\/flags$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_HidSec	ourhdr.h	/^	uint32		BPB_HidSec;		\/\/sectors ahead bootsector$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_Media	ourhdr.h	/^	uint8		BPB_Media;	\/\/0xf8: harddisk, 0xf0: softdisk.$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_NumFATs	ourhdr.h	/^	uint8		BPB_NumFATs;		\/\/number of fats$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_NumHeads	ourhdr.h	/^	uint16		BPB_NumHeads;		\/\/head number$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_Reserved	ourhdr.h	/^	uint32		BPB_Reserved[3];	\/\/reserved$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_RootClus	ourhdr.h	/^	uint32		BPB_RootClus;		\/\/root cluster number$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_RootEntCnt	ourhdr.h	/^	uint16		BPB_RootEntCnt;		\/\/ 0 in fat32$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_RsvdSecCnt	ourhdr.h	/^	uint16		BPB_RsvdSecCnt; 	\/\/number of reserved sectors$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_SecPerClus	ourhdr.h	/^	uint8		BPB_SecPerClus;		\/\/sectors per cluster$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_SecPerTrk	ourhdr.h	/^	uint16		BPB_SecPerTrk;		\/\/sectors per track$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_ToSec16	ourhdr.h	/^	uint16		BPB_ToSec16;		\/\/ 0 in fat32$/;"	m	struct:BIOS_PARAMETER_BLOCK
BPB_ToSec32	ourhdr.h	/^	uint32		BPB_ToSec32;		\/\/total_sectors $/;"	m	struct:BIOS_PARAMETER_BLOCK
BS	ourhdr.h	/^}BS;$/;"	t	typeref:struct:__anon1
BS_BootSig	ourhdr.h	/^	uint8		BS_BootSig;			\/\/externed boot signature$/;"	m	struct:__anon1
BS_DrvNum	ourhdr.h	/^	uint8		BS_DrvNum;			\/\/drive number;$/;"	m	struct:__anon1
BS_FilSysType	ourhdr.h	/^	uchar		BS_FilSysType[8];	\/\/fs name$/;"	m	struct:__anon1
BS_Reserved1	ourhdr.h	/^	uint8		BS_Reserved1;		\/\/reserved1$/;"	m	struct:__anon1
BS_VolId	ourhdr.h	/^	uint32		BS_VolId;			\/\/volumn id$/;"	m	struct:__anon1
BS_VolSysType	ourhdr.h	/^	uchar		BS_VolSysType[11];	\/\/volumn name$/;"	m	struct:__anon1
CLUSTER_SIZE	ourhdr.h	46;"	d
ChangeDate	ourhdr.h	/^	DATE	ChangeDate;			\/\/last change date$/;"	m	struct:__anon6
ChangeTime	ourhdr.h	/^	TIME	ChangeTime;			\/\/last change time$/;"	m	struct:__anon6
CreateDate	ourhdr.h	/^	DATE	CreateDate;			\/\/create date$/;"	m	struct:__anon6
CreateTime	ourhdr.h	/^	TIME	CreateTime;			\/\/create time$/;"	m	struct:__anon6
DATE	ourhdr.h	/^}DATE;$/;"	t	typeref:struct:__anon4
DBR	ourhdr.h	/^}DBR;$/;"	t	typeref:struct:__anon2
DBR_BPB	ourhdr.h	/^	BPB			DBR_BPB;$/;"	m	struct:__anon2
DBR_BS	ourhdr.h	/^	BS			DBR_BS;$/;"	m	struct:__anon2
DBR_BootCode	ourhdr.h	/^	uchar		DBR_BootCode[420];$/;"	m	struct:__anon2
DBR_BootSign	ourhdr.h	/^	uchar		DBR_BootSign[2];$/;"	m	struct:__anon2
DBR_FacCode	ourhdr.h	/^	uchar		DBR_FacCode[8];$/;"	m	struct:__anon2
DBR_JmpCode	ourhdr.h	/^	uchar		DBR_JmpCode[3];$/;"	m	struct:__anon2
DIR_MODE	ourhdr.h	24;"	d
FAT_ENTRY_SIZE	ourhdr.h	48;"	d
FAT_NUMBER	ourhdr.h	47;"	d
FILE_MODE	ourhdr.h	20;"	d
FSINFO	ourhdr.h	/^}FSINFO;$/;"	t	typeref:struct:__anon3
FSINFO_EndSign	ourhdr.h	/^	uint32	FSINFO_EndSign;			\/\/0xaa5500$/;"	m	struct:__anon3
FSINFO_LastClus	ourhdr.h	/^	uint32	FSINFO_LastClus;		\/\/number of clusters remained$/;"	m	struct:__anon3
FSINFO_Reserved1	ourhdr.h	/^	uchar	FSINFO_Reserved1[480];	\/\/not used$/;"	m	struct:__anon3
FSINFO_Reserved2	ourhdr.h	/^	uchar	FSINFO_Reserved2[12];	\/\/not used$/;"	m	struct:__anon3
FSINFO_SrchEnt	ourhdr.h	/^	uint32	FSINFO_SrchEnt;			\/\/where to find remained clusters$/;"	m	struct:__anon3
FSINFO_Sym	ourhdr.h	/^	uint32	FSINFO_Sym;				\/\/0x41615252, indicate this a fsinfo sector$/;"	m	struct:__anon3
FSINFO_Used	ourhdr.h	/^	uint32	FSINFO_Used;			\/\/0x61417272, indicate this sector has been used$/;"	m	struct:__anon3
FilName	ourhdr.h	/^	uchar	FilName[11];			\/\/file name, 0x20 if not enough, 8-bit filename and 3-bit extended name$/;"	m	struct:__anon6
FileLength	ourhdr.h	/^	uint32	FileLength;			\/\/file length$/;"	m	struct:__anon6
HighClus	ourhdr.h	/^	uint16	HighClus;			\/\/high 16-bit of cluster number$/;"	m	struct:__anon6
INDEX_FILE_CLUS	ourhdr.h	178;"	d
INDEX_FILE_NUM_PER_FOLDER	ourhdr.h	58;"	d
INDEX_FILE_SIZE	ourhdr.h	59;"	d
LONG_FDT	ourhdr.h	/^}LONG_FDT;$/;"	t	typeref:struct:__anon7
LastVisitDate	ourhdr.h	/^	DATE	LastVisitDate;		\/\/last visit date$/;"	m	struct:__anon6
LowClus	ourhdr.h	/^	uint16	LowClus;			\/\/low 16-bit of cluster number$/;"	m	struct:__anon6
MAXLINE	ourhdr.h	17;"	d
MIN_FREE_SPACE	ourhdr.h	55;"	d
MilliTime	ourhdr.h	/^	uchar	MilliTime;			\/\/10 ms$/;"	m	struct:__anon6
RESERVED_SECTORS	ourhdr.h	49;"	d
ROOT_CLUSTERS	ourhdr.h	50;"	d
Reserved	ourhdr.h	/^	uchar	Reserved;$/;"	m	struct:__anon6
SECTORS_PER_CLUSTER	ourhdr.h	45;"	d
SECTOR_SIZE	ourhdr.h	44;"	d
SHORT_FDT	ourhdr.h	/^}SHORT_FDT;$/;"	t	typeref:struct:__anon6
TIME	ourhdr.h	/^}TIME;$/;"	t	typeref:struct:__anon5
VIDEOS_PER_PACK	ourhdr.h	57;"	d
VIDEO_CLUS	ourhdr.h	56;"	d
VIDEO_FILE_CLUS	ourhdr.h	180;"	d
__ourhdr_h	ourhdr.h	2;"	d
addFDT	pre_allocation.c	/^void addFDT(int fd, $/;"	f
clearSectors	libs.c	/^void clearSectors(int fd,$/;"	f
createFile	libs.c	/^void createFile(int fd,$/;"	f
day	ourhdr.h	/^	uint16	day		: 5;			\/\/ 1-31$/;"	m	struct:__anon4
disp	ourhdr.h	34;"	d
disp16	ourhdr.h	35;"	d
err_doit	libs.c	/^static void err_doit(int errnoflag, const char *fmt, va_list ap){$/;"	f	file:
err_dump	libs.c	/^void err_dump(const char* fmt, ...){$/;"	f
err_msg	libs.c	/^void err_msg(const char* fmt, ...){$/;"	f
err_quit	libs.c	/^void err_quit(const char *fmt, ...){$/;"	f
err_ret	libs.c	/^void err_ret(const char * fmt, ...){$/;"	f
err_sys	libs.c	/^void err_sys(const char * fmt, ...){$/;"	f
fillFDT	ourhdr.h	147;"	d
format	formatting.c	/^void format(char* device ){$/;"	f
hour	ourhdr.h	/^	uint16	hour	: 5;			\/\/0-23$/;"	m	struct:__anon5
main	test.c	/^int main(){$/;"	f
min	ourhdr.h	/^	uint16	min		: 6;			\/\/0-59$/;"	m	struct:__anon5
month	ourhdr.h	/^	uint16	month	: 4;			\/\/ 1-12$/;"	m	struct:__anon4
pname	libs.c	/^char * pname = NULL;$/;"	v
pre_allocation	pre_allocation.c	/^void pre_allocation(char *device){$/;"	f
two_sec	ourhdr.h	/^	uint16	two_sec : 5;			\/\/0-29, indicate 0-58 seconds$/;"	m	struct:__anon5
uchar	ourhdr.h	/^typedef unsigned char		uchar;$/;"	t
uint16	ourhdr.h	/^typedef unsigned short		uint16;$/;"	t
uint32	ourhdr.h	/^typedef unsigned int		uint32;$/;"	t
uint64	ourhdr.h	/^typedef unsigned long long	uint64;$/;"	t
uint8	ourhdr.h	/^typedef unsigned char		uint8;$/;"	t
writeFatEntries	pre_allocation.c	/^void writeFatEntries(int fd,$/;"	f
year	ourhdr.h	/^	uint16	year	: 7;			\/\/ 0-127, plus 1980$/;"	m	struct:__anon4
